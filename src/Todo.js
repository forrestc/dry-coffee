// Generated by CoffeeScript 2.0.0-beta3
var Todo, TodoItem, TodoStore, apiCall, theme;

import {
  Component,
  Store,
  Theme
} from './superdry';

import Button from './Button';

apiCall = function() {
  return fetch('http://localhost:10040/autocomplete?types=chain&q=starbucks');
};

theme = new Theme;

TodoItem = class TodoItem extends Store {
  constructor(value) {
    super({
      value: value,
      id: Date.now(),
      complete: false,
      action: function() {
        var action, due;
        [action, due] = this.value.split(' due ');
        return action;
      },
      due: function() {
        var action, due;
        [action, due] = this.value.split(' due ');
        if (due) {
          return new Date(due).toDateString();
        } else {
          return new Date().toDateString();
        }
      }
    });
  }

  toggle() {
    return this.complete = !this.complete;
  }

};

TodoStore = class TodoStore extends Store {
  constructor() {
    super({
      todos: [],
      filter: '',
      inDates: function() {
        var dates, i, len, name, ref, todo;
        dates = {};
        ref = this.todos;
        for (i = 0, len = ref.length; i < len; i++) {
          todo = ref[i];
          if (!todo.complete) {
            dates[name = todo.due] || (dates[name] = []);
            dates[todo.due].push(todo.key);
          }
        }
        return dates;
      },
      filteredTodos: function() {
        var matchesFilter;
        matchesFilter = new RegExp(this.filter, 'i');
        return this.todos.filter((todo) => {
          return !this.filter || matchesFilter.test(todo.action);
        });
      }
    });
  }

  async initData() {
    var data, e, res;
    try {
      res = (await apiCall());
      data = (await res.json());
      return console.log(data);
    } catch (error) {
      e = error;
      return console.log(e);
    }
  }

};

export var store = new TodoStore;

store.initData();

window.store = store;

Todo = class Todo extends Component {
  createTodo(e) {
    var todo, value;
    if (e.which === 13) {
      value = e.target.value;
      todo = new TodoItem(value);
      return store.todos.push(todo);
    }
  }

  toggle(e) {
    var i, id, len, ref, results, todo;
    id = parseInt(e.target.id);
    ref = store.todos;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      todo = ref[i];
      if (todo.id === id) {
        results.push(todo.toggle());
      }
    }
    return results;
  }

  clearCompleted() {
    var incompleted;
    incompleted = store.todos.filter(function(todo) {
      return !todo.complete;
    });
    return store.todos.replace(incompleted);
  }

  filter(e) {
    return store.filter = e.target.value;
  }

  render() {
    return theme.apply((t) => {
      return t.div(() => {
        t.h1(this.props.name);
        t.input({
          type: 'text',
          placeholder: 'new todo',
          onKeyPress: this.createTodo.bind(this)
        });
        t.input({
          type: 'text',
          placeholder: 'filter',
          value: store.filter,
          onChange: this.filter.bind(this)
        });
        t.com(Button, {
          onClick: this.clearCompleted,
          label: 'Clear Completed'
        });
        return t.ul(() => {
          var i, len, ref, results, todo;
          ref = store.filteredTodos;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            todo = ref[i];
            results.push(t.li({
              key: todo.id
            }, () => {
              t.input({
                type: 'checkbox',
                id: todo.id,
                value: todo.complete,
                checked: todo.complete,
                onChange: this.toggle.bind(this)
              });
              t.span(todo.action);
              return t.small(`(${todo.due})`);
            }));
          }
          return results;
        });
      });
    });
  }

};

export default Todo;
