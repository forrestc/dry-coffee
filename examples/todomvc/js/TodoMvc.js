// Generated by CoffeeScript 2.0.1
var Entry, EntryList, Footer, Input, Todo, TodoStore;

import {
  every,
  find,
  filter,
  isEmpty,
  pick,
  remove
} from 'lodash';

import {
  Component,
  Store
} from '../../../lib/superdry';

import theme from './theme';

import api from './apiDriver';

// Stores
Entry = class Entry extends Store {
  setup(load = {}) {
    return {
      description: (load != null ? load.description : void 0) || '',
      completed: (load != null ? load.completed : void 0) || false,
      editing: false,
      id: (load != null ? load.id : void 0) || Date.now()
    };
  }

  onUpdate() {
    if (!this.editing) {
      return api.patch(this.id, this.json());
    }
  }

};

TodoStore = class TodoStore extends Store {
  setup() {
    return {
      entries: [],
      visibility: 'All',
      input: '',
      visibleEntries: function() {
        switch (this.visibility) {
          case 'Completed':
            return this.completedEntries;
          case 'Active':
            return this.incompletedEntries;
          default:
            return this.entries;
        }
      },
      completedEntries: function() {
        return filter(this.entries, 'completed');
      },
      incompletedEntries: function() {
        return filter(this.entries, ['completed', false]);
      },
      entriesLeft: function() {
        var count;
        count = this.incompletedEntries.length;
        switch (count) {
          case 0:
            return '';
          case 1:
            return '1 item left';
        }
      }
    };
  }

  async load() {
    var i, len, obj, ref, results;
    ref = (await api.list());
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      obj = ref[i];
      results.push(this.entries.push(new Entry(obj)));
    }
    return results;
  }

  onEntriesCreate(entry) {
    return api.create(entry);
  }

  onEntriesDelete(entry) {
    return api.delete(entry.id);
  }

};

export var $ = new TodoStore;

// Components
Input = class Input extends Component {
  updateField(input) {
    return $.input = input;
  }

  add() {
    var entry;
    entry = new Entry({
      description: $.input
    });
    $.entries.push(entry);
    return $.input = '';
  }

  render() {
    return theme.apply((t) => {
      return t.newTodo({
        placeholder: 'What needs to be done?',
        value: $.input,
        name: 'newTodo',
        onInput: this.updateField,
        onEnter: this.add
      });
    });
  }

};

EntryList = class EntryList extends Component {
  checkAll() {
    var entry, i, len, ref, results;
    ref = $.entries;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      entry = ref[i];
      results.push(entry.completed = true);
    }
    return results;
  }

  _entry(id) {
    return find($.entries, {
      id: id
    });
  }

  check(id) {
    var entry;
    entry = this._entry(id);
    return entry.completed = !entry.completed;
  }

  edit(id, isEditing = true) {
    var entry;
    entry = this._entry(id);
    return entry.editing = isEditing;
  }

  update(id, text) {
    return this._entry(id).description = text;
  }

  delete(id) {
    return remove($.entries, function(entry) {
      return entry.id === id;
    });
  }

  render() {
    return theme.apply((t) => {
      return t.with('main', {
        empty: isEmpty($.entries)
      })(() => {
        t.toggle({
          name: 'toggle',
          checked: every($.entries, 'completed'),
          onChange: this.checkAll
        });
        t.toggleLabel({
          for: 'toggle'
        }, 'Mark all as complete');
        return t.list(() => {
          return $.visibleEntries.forEach((entry) => {
            return t.with('task', pick(entry, 'editing'))(() => {
              if (entry.editing) {
                return t.taskEdit({
                  value: entry.description,
                  id: entry.id,
                  onInput: (text) => {
                    return this.update(entry.id, text);
                  },
                  onBlur: () => {
                    return this.edit(entry.id, false);
                  },
                  onEnter: () => {
                    return this.edit(entry.id, false);
                  }
                });
              } else {
                t.taskToggle({
                  checked: entry.completed,
                  onChange: () => {
                    return this.check(entry.id);
                  }
                });
                t.with('entryLabel', pick(entry, 'completed'))({
                  onDoubleClick: () => {
                    return this.edit(entry.id);
                  }
                }, entry.description);
                return t.destroyBtn({
                  onClick: () => {
                    return this.delete(entry.id);
                  }
                });
              }
            });
          });
        });
      });
    });
  }

};

Footer = class Footer extends Component {
  changeVisibility(visibility) {
    return $.visibility = visibility;
  }

  clear() {
    return remove($.entries, 'completed');
  }

  render() {
    return theme.apply((t) => {
      if (!isEmpty($.entries)) {
        return t.footer(() => {
          var completions;
          t.counter($.entriesLeft);
          t.filters(() => {
            return ['All', 'Active', 'Completed'].forEach((visibility) => {
              var buttonOpts, current;
              buttonOpts = {
                onClick: () => {
                  return this.changeVisibility(visibility);
                }
              };
              current = visibility === $.visibility;
              return t.with('filter', {
                current: current
              })(buttonOpts, visibility);
            });
          });
          completions = $.completedEntries.length;
          if (completions > 0) {
            return t.clearBtn({
              onClick: this.clear
            }, `Clear completed (${completions})`);
          }
        });
      }
    });
  }

};

Todo = class Todo extends Component {
  render() {
    return theme.apply(function(t) {
      return t.wrapper(function() {
        t.app(function() {
          t.header('todos');
          t.com(Input);
          t.com(EntryList);
          return t.com(Footer);
        });
        return t.info(function() {
          t.infoLine('Double-click to edit a todo');
          t.infoLine(function() {
            t.span('Written by ');
            return t.infoLink({
              href: 'https://github.com/forrestc'
            }, 'Forrest Cao');
          });
          return t.infoLine(function() {
            t.span('Not yet part of ');
            return t.infoLink({
              href: 'http://todomvc.com'
            }, 'TodoMVC');
          });
        });
      });
    });
  }

};

export default Todo;
